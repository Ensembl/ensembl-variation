#!/usr/bin/env perl

=head1 LICENSE

Copyright [1999-2015] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute
Copyright [2016-2018] EMBL-European Bioinformatics Institute

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=cut


=head1 CONTACT

 Please email comments or questions to the public Ensembl
 developers list at <http://lists.ensembl.org/mailman/listinfo/dev>.

 Questions may also be sent to the Ensembl help desk at
 <http://www.ensembl.org/Help/Contact>.

=cut

## collect variant synonyms & load to db
##  - initially from PharmGKB database

use strict;
use warnings;
use HTTP::Tiny;
use Getopt::Long;
use Data::Dumper;


use Bio::EnsEMBL::Registry;
use Bio::EnsEMBL::Variation::Source; 

our $DEBUG = 0;

my ($data_file, $registry_file, $species, $source_name, $clean, $source_version, $source_url, $source_description, $new_option);

GetOptions ("data_file=s"          => \$data_file,
            "species=s"            => \$species,
            "source_name=s"        => \$source_name,
            "source_url=s"         => \$source_url,
            "source_version=s"     => \$source_version,
            "source_description=s" => \$source_description,
            "registry=s"           => \$registry_file,
            "new_option=s"         => \$new_option,
            "clean"                => \$clean 
            );

usage() unless defined $registry_file && defined $source_name;

$species ||= 'homo_sapiens';


my $reg = 'Bio::EnsEMBL::Registry';
$reg->load_all($registry_file); 
# Get db adaptors to the source (production) and destination databases 
# my $production_dba = $reg->get_DBAdaptor('Multi','source_db') or die ("Could not get a DBAdaptor for the IntVar db"); # I don't think this one is right 
my $dest_db = $reg->get_DBAdaptor($species, 'variation_db') or die ("Could not get a DBAdaptor for the Variation db"); 
$dest_db->include_failed_variations(1);


  ### import synonyms from production database ### don't use registry file because this db doesn't have adaptors 
  my $source_dbc = Bio::EnsEMBL::DBSQL::DBConnection->new
    ( '-host'    => 'mysql-ens-var-prod-1.ebi.ac.uk',
      '-port'    => 4449, 
      '-user'    => 'ensadmin',
      '-pass'    => 'ensembl',
      '-dbname'  => 'production',
      '-driver'  =>  'mysql' 
    ); 

  my $synonyms_output = fetch_synonyms_data($source_dbc, '*', 'human_synonym'); 

  my %synonyms; # key: synonym_name; value: rs_name 
  my %source_ids; # key: synonym_name; value: source_id 
  my %source_names; #key: source_id; value: source object  

  # get data from human_synonym table 
  foreach my $result (@{$synonyms_output}){  
    $synonyms{$result->[2]} = $result->[1]; 
    $source_ids{$result->[2]} = $result->[4]; 
  }

  my $output_synonyms = \%synonyms; 
  my $output_source_ids = \%source_ids; 

  # get sources from production db 
  my $sources = get_source($dest_db, $source_dbc); 
if($output_synonyms){
  import_synonyms($output_synonyms, $sources, $output_source_ids, $dest_db, $species); 
} 

sub get_source{

  my $dest_db = shift;
  my $source_dbc = shift; 

  # my %source_names; # hash with source id and corresponding source name 
  my %source_list; 

  my $source_adaptor = $dest_db->get_SourceAdaptor('human', 'variation'); 

  my $source_output = fetch_synonyms_data($source_dbc, '*', 'source');  

  foreach my $result_from_source (@{$source_output}){  
    # my $source_id = $result_from_source->[0]; 
    my $source_name = $result_from_source->[1]; 
    my $source = $source_adaptor->fetch_by_name($source_name);
    
    if(defined($source)){
      # print "SOURCE DEFINED: $source_name\n";  
      # if(defined $version){ 
      #   $source->version($version);
      #   $source_adaptor->update_version($source);   
      # }  
    }
    else{
      print "SOURCE NOT DEFINED: $source_name\n";   
      # print "Adding info for source $source_name\n"; 
      $source = Bio::EnsEMBL::Variation::Source->new
         (-name        => $source_name, 
          -url         => $result_from_source->[4],
          -version     => $result_from_source->[2],
          -description => $result_from_source->[3], 
          -data_types  => ['variation_synonym']
        );

      eval{$source_adaptor->store($source);} ; die "ERROR storing source: $@\n" unless $@ eq ''; 
    } 
    $source_list{$result_from_source->[0]} = $source; 
  } 

  return \%source_list; 
}

=head2 import_synonyms

import synonyms from production database  

=cut
sub import_synonyms{

  my $synonyms          = shift;
  my $sources           = shift; 
  my $output_source_ids = shift; 
  my $dest_db           = shift; 
  my $species           = shift; 

  my $variation_adaptor = $dest_db->get_VariationAdaptor($species, 'variation');  

  foreach my $synonym_name (keys %{$synonyms}){ 
    my $var_name = $synonyms{$synonym_name}; 
    my $var = $variation_adaptor->fetch_by_name($var_name);
  
    if(defined($var)){  
      print "DEFINED!!\n"; 
      my $source_id = $output_source_ids->{$synonym_name}; 
      my $source = $sources->{$source_id}; 
      $var->add_synonym($source->name(), $synonym_name);
      $variation_adaptor->store_synonyms($var); 
    } 
  } 
}

=head2 fetch_synonyms_data 

fetch data from production database   

=cut
sub fetch_synonyms_data{

  my $source_dbc = shift;
  my $params     = shift; 
  my $table_name = shift;

  my $statement = $source_dbc->prepare("SELECT $params FROM $table_name");  
  $statement->execute(); 
  my $source_output = $statement->fetchall_arrayref();  
  $statement->finish(); 

  return $source_output; 
} 

