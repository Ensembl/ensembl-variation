# Relax NG schema for LRG
# Version $Revision: 1.6 $
# Last modified: 2010-03-10

start = LRG
LRG = element lrg { 

   attribute schema_version { xsd:decimal },
   FIXED_ANNOTATION, 
   UPDATABLE_ANNOTATION 

}

# fixed annotation section will remain unchanged for lifespan of LRG
FIXED_ANNOTATION = element fixed_annotation {

   # main LRG identifier e.g. LRG_1
   element id { xsd:string { pattern = 'LRG_[0-9]+' } },
   
   element organism { 
      attribute taxon { xsd:integer },
      text
   },
   
   SOURCE+, # see SOURCE element below
   
   element mol_type { text }, # e.g. "genomic DNA". TODO: enumeration?
   
   element creation_date { xsd:date },
   
   DNA_SEQUENCE, # see DNA_SEQUENCE element below
   
   FIXED_TRANSCRIPT+ # /transcript
   
} # /fixed_annotation

FIXED_TRANSCRIPT = element transcript {
   attribute name { text }, # e.g. "t1", "t2"
   
   # location of transcript in LRG coordinates
   attribute start { xsd:integer },
   attribute end { xsd:integer },
   
   element cdna { DNA_SEQUENCE },
   
   CODING_REGION,
   
   # All transcripts have at least one exon
   EXON,
   
   # Additional (intron)-exon blocks  
   INTRONEXON*
   
}
   
CODING_REGION = element coding_region {
   
   # location of coding region in LRG coordinates
   attribute start { xsd:integer },
   attribute end { xsd:integer },
   
   # start phase of coding sequence when coding sequence is incomplete
   attribute codon_start { xsd:integer }?,
   
   # location of selenocysteine codon(s)
   element selenocysteine {
      attribute codon { xsd:integer }
   }*,
   
   # location of pyrrolysine codon(s)
   element pyrrolysine {
      attribute codon { xsd:integer }
   }*,
   
   element translation { PEPTIDE_SEQUENCE } 
}

# updatable annotation can be updated with e.g. new annotations, mappings, labels etc
UPDATABLE_ANNOTATION = element updatable_annotation {

   # an annotation set comes from one source - allows multiple sets of annotations from e.g. Ensembl/NCBI
   ANNOTATION_SET+   

} # /updatable_annotation

ANNOTATION_SET = element annotation_set {
   SOURCE,
   
   element comment { text }?,
   
   element modification_date { xsd:date }, 
   
   # allows exons to be named; in fixed layer exons are defined only by their coordinates
   OTHER_EXON_NAMING?,
   
   # multiple mappings allowed e.g. to different assemblies
   MAPPING*,
   
   # allows for legacy systems of amino acid numbering
   ALT_AA_NUMBERING?,
   
   element lrg_gene_name {
      attribute source { text },
      text
   }?,
   
   FEATURES?,

   element variation {
      empty     # TODO more details
   }?
}
   
MAPPING = element mapping {
   attribute assembly { text },
   attribute chr_name { text },
   attribute chr_id { text }?,
   attribute chr_start { xsd:integer },
   attribute chr_end { xsd:integer },
   attribute most_recent { xsd:integer }?,
   
   # a mapping span corresponds to a block of the LRG sequence that aligns with an assembly
   MAPPING_SPAN+
}
      
MAPPING_SPAN = element mapping_span {
   attribute lrg_start { xsd:integer },
   attribute lrg_end { xsd:integer },
   attribute strand { '-1' | '1' },
   attribute start { xsd:integer },
   attribute end { xsd:integer },
   
   # diff elements allow small-scale differences between the LRG sequence and assembly to be detailed
   DIFF*
}
         
DIFF = element diff {
   attribute type {'mismatch' | 'lrg_ins' | 'genomic_ins'},
   attribute lrg_start { xsd:integer }?,
   attribute lrg_end { xsd:integer }?,
   attribute start { xsd:integer }?,
   attribute end { xsd:integer }?,
   attribute lrg_sequence {text}?, #for mismatches or lrg_ins
   attribute genomic_sequence {text}? #for mismatches or genome_ins
}

OTHER_EXON_NAMING = element other_exon_naming {

   # allow for multiple name sources e.g. different groups
   element source {
   
      # description of source - may be URL/group/name
      attribute description { text },
      
      # naming corresponds to only one transcript per set
      element transcript {
         attribute name { text },
         
         element exon {
            element lrg_coords {
               attribute start { xsd:integer },
               attribute end { xsd:integer }
            },
            element label { text }
         }+
      }+
   }*
}
            
ALT_AA_NUMBERING = element alternate_amino_acid_numbering {
   element source { 
      attribute description { text },
      
      element transcript {
         attribute name { text },
         
         element align {
            attribute lrg_start { xsd:integer },
            attribute lrg_end {xsd:integer },
            attribute start { xsd:integer },
            attribute end { xsd:integer }
         }+
      }+
   }*
}

FEATURES = element features {
   GENE*
}

GENE = element gene {
   attribute symbol { text },
   attribute strand { '-1' | '1' }, # strand to which the gene maps
   
   # position of gene in LRG coordinates
   attribute start { xsd:integer },
   attribute end { xsd:integer },
   
   # indicates if the gene only partially overlaps the LRG
   element partial { '5-prime' | '3-prime' }*,
   element synonym { text }*,
   element long_name { text }*,
   element comment { text }*,
   
   DB_XREF*, # see DB_XREF element below
   
   # genes may contain zero or more transcripts
   TRANSCRIPT*
   
}
         
TRANSCRIPT = element transcript {
   attribute source { text },
   attribute start { xsd:integer },
   attribute end { xsd:integer },
   attribute transcript_id { text },
   attribute fixed_id { text }?,
   
   element partial { '5-prime' | '3-prime' }*,
   element long_name { text }*,
   element comment { text }*,
   DB_XREF*,
   
   PROTEIN_PRODUCT?
}
            
PROTEIN_PRODUCT = element protein_product {
   attribute source { text },
   attribute accession { text },
   attribute cds_start { xsd:integer },
   attribute cds_end { xsd:integer },
   attribute codon_start { xsd:integer }?,
   
   element partial { '5-prime' | '3-prime' }*,
   element long_name { text }*,
   element comment { text }*,
   DB_XREF*
}

DNA_SEQUENCE = element sequence {
   xsd:string { pattern = '[ATGC]+' }
} 

PEPTIDE_SEQUENCE = element sequence {
   xsd:string { pattern = '[ACDEFGHIKLMNOPQRSTUVWY]+' }
}

DB_XREF = element db_xref { 
   attribute source { 'GeneID' | 'HGNC' | 'MIM' | 'GI' | 'RefSeq' | 'Ensembl' | 'CCDS' | 'UniProtKB' | 'RFAM' | 'miRBase' | 'pseudogene.org' },   
   attribute accession { text }
}

SOURCE = element source {
   element name { text },
   element url { text }*,
   
   # multiple contacts may be specified within a source
   CONTACT*
}

CONTACT = element contact {
   element name { text }?,
   element url { text }*,
   element address { text }?,
   element email { text }? 
}

# exon element - coordinates given in three systems
EXON = element exon {
   element lrg_coords { # relative to LRG sequence
      attribute start { xsd:integer },
      attribute end { xsd:integer }
   },
   element cdna_coords { # relative to cDNA sequence
      attribute start { xsd:integer },
      attribute end { xsd:integer }
   },
   element peptide_coords { # relative to peptide sequence (optional)
      attribute start { xsd:integer },
      attribute end { xsd:integer }
   }?
}

INTRON = element intron {
      # intron phase
      #  0 : intron falls between codons
      #  1 : intron falls between 1st and 2nd base of codon
      #  2 : intron falls between 2nd and 3rd base of codon
      attribute phase { '0' | '1' | '2' }
}
   
# Compound element containing one (optional) intron and one (required) exon
INTRONEXON = (
   INTRON?,
   EXON
)
