#!/usr/bin/env perl

=head1 LICENSE

Copyright [1999-2014] Wellcome Trust Sanger Institute and the EMBL-European Bioinformatics Institute

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=cut


=head1 CONTACT

 Please email comments or questions to the public Ensembl
 developers list at <http://lists.ensembl.org/mailman/listinfo/dev>.

 Questions may also be sent to the Ensembl help desk at
 <http://www.ensembl.org/Help/Contact>.

=cut

=head2 import_clinvar_xml

  - parse ClinVar XML and import data for dbSNP or dbVar variants
  - add the short variant data if ClinVar is releasing ahead of dbSNP
  - only import ClinVar records for structural variants already in ensembl
  - use the positions of the features held in ensembl where possible

  - attribs entered
  - review_status    = Status
  - external_id      = Acc
  - clinvar_clin_sig = Desc
  - risk_allele      = HGVS allele (dbSNP variants only)

=cut

use strict;
use warnings;
use Getopt::Long;
use XML::Simple;
use XML::Parser;
use XML::Records;
use Data::Dumper;


use Bio::EnsEMBL::Variation::Utils::Sequence qw( get_hgvs_alleles);
use Bio::EnsEMBL::Variation::VariationFeature;
use Bio::DB::Fasta;
use Bio::EnsEMBL::Registry;

our $DEBUG = 0;

my ($data_file, $registry_file, $assembly, $structvar, $done_file);

GetOptions ("data_file=s"  => \$data_file,
            "registry=s"   => \$registry_file,
            "assembly=s"   => \$assembly,
            "structvar"    => \$structvar, 
            "done_file"    => \$done_file, 
            );

usage() unless defined $data_file && defined $registry_file && defined $assembly;

my $reg = 'Bio::EnsEMBL::Registry';
$reg->load_all($registry_file);
my $dba = $reg->get_DBAdaptor('homo_sapiens','variation');
## only merging records by name, so include fails
$dba->include_failed_variations(1);

my $variation_adaptor     = $dba->get_VariationAdaptor('human', 'variation', );
my $var_feat_adaptor      = $dba->get_VariationFeatureAdaptor('human', 'variation', );
my $allele_adaptor        = $reg->get_adaptor('homo_sapiens', 'variation', 'allele');
my $structvar_adaptor     = $dba->get_StructuralVariationAdaptor('human', 'variation', );

my $pheno_feat_adaptor    = $reg->get_adaptor('homo_sapiens', 'variation', 'phenotypefeature');
my $phenotype_adaptor     = $reg->get_adaptor('homo_sapiens', 'variation', 'phenotype');

my $slice_adaptor         = $reg->get_adaptor('homo_sapiens', 'core', 'slice');

## fetch ClinVar source object
my $source   =   get_source("ClinVar");

## default ClinVar phenotype description if non available
my $default_pheno  = "ClinVar: phenotype not specified";

my $ref = XML::Records->new($data_file);
$ref->set_records('ClinVarSet');

## handle incomplete runs - takes list of ClinVar RC accessions 
my %done;
if (defined $done_file){
  open my $donelist, $done_file ||die "Unable to open list of variants already entered : $!\n";
  while(<$donelist>){
    my $id = (split)[1];
    $done{$id} = 1;
  }
}

my @records;

while (my $set = $ref->get_record() ){
    
    ## dump current structure on exit
    my $current = Dumper $set;

    my %record;
    eval{

	foreach my $acc(@{$set->{ReferenceClinVarAssertion}->{ClinVarAccession}}){
	    next unless ref($acc) eq  'HASH';
	    ### ClinVar reference accession 
	    $record{Acc} =  $acc->{Acc} .".".  $acc->{Version} ;
	}
        next if $done{$record{Acc}};
        ## clinical significance

        if ($set->{ReferenceClinVarAssertion}->{ClinicalSignificance}->{Description} =~/conflict/){       
            ## if there are 2 conflicting statuses for a variant/trait combination
            ## Description = 'conflicting data from submitters' - values in explanation
            $record{Desc} = "\L$set->{ReferenceClinVarAssertion}->{ClinicalSignificance}->{Explanation}->[0]";
            $record{Desc} =~ s/\(\d+\)//g; ## remove bracketed counts 
            $record{Desc} =~ s/\;/\,/g;    ## switch to comma delimited for set 
        }
        else{
            $record{Desc} = "\L$set->{ReferenceClinVarAssertion}->{ClinicalSignificance}->{Description}";
        }
        ## confidence of assertation
        $record{Status} = $set->{ReferenceClinVarAssertion}->{ClinicalSignificance}->{ReviewStatus} ;

	my @measures;
	if(ref($set->{ReferenceClinVarAssertion}->{MeasureSet}->{Measure}) eq 'ARRAY'){
	    @measures = @{$set->{ReferenceClinVarAssertion}->{MeasureSet}->{Measure}};
	}
	else{
	    push @measures, $set->{ReferenceClinVarAssertion}->{MeasureSet}->{Measure};
	}

	foreach my $measure(@measures){
	    next unless(ref($measure) eq 'HASH');

            ## Look for gene symbols - if it's a big variant, it could cover 2 genes
            if(defined $measure->{MeasureRelationship}){
                
                if( ref( $measure->{MeasureRelationship})  eq 'HASH'){    
                   $record{gene} = $measure->{MeasureRelationship}->{Symbol}->{ElementValue}->[0];
                 }
                 else{
                    ## API doesn't handle 2 genes currently
                    my @multi;
                    foreach my $meas (@{$measure->{MeasureRelationship}}){
                        push @multi, $meas->{Symbol}->{ElementValue}->[0] if $meas->{Symbol}->{ElementValue}->[0] =~ /\w/;
                    } 
                    $record{gene} = join(",", @multi);
                 }
  
            }


	    ### get dbSNP rs id  & OMIM id Xrefs, if available
	    if(defined $measure->{XRef}){
		foreach my $xref( @{$measure->{XRef}} ){
		    
		    next unless ref($xref) eq  'HASH';
		    $record{$xref->{DB}} = $xref->{ID} ;
		} 
	    }


	    ### get location(s)
	    next unless defined $measure->{SequenceLocation};
	    foreach my $loc(@{$measure->{SequenceLocation}}){

		next unless ref($loc) eq  'HASH'; 
		next unless $loc->{Assembly} eq $assembly;

		$record{Chr}    = $loc->{Chr} ; 
		$record{start}  = $loc->{start} ; 
		$record{end}    = $loc->{stop} ; 
	        ## default to positive strand as alleles come from HGVS 
		$record{strand} = '1';
		$record{Ass}    = $loc->{Assembly}; 


	    }
	    my @attrib_set;
	    if(ref($measure->{AttributeSet}) eq 'ARRAY'){
		@attrib_set = @{$measure->{AttributeSet}};
	    }
	    else{
		push @attrib_set, $measure->{AttributeSet}
	    }
	    ### get HGVS name for allele string
	    foreach my $attrib (@attrib_set){
		
		## Not all of them have a current top level genomic
		next unless (defined $attrib->{Attribute}->[1]->{Type} &&
                             $attrib->{Attribute}->[1]->{Type} =~ /HGVS,\s+genomic,\s+top/ );
		
		$record{hgvs_g} =  $attrib->{Attribute}->[1]->{Change} 
		if $attrib->{Attribute}->[1]->{Type} eq "HGVS, genomic, top level";

		## this will pick up the previous hgvs string if none set
		$record{hgvs_g} =  $attrib->{Attribute}->[1]->{Change} 
		if !defined $record{hgvs_g} ;


	    }

	}

	### Trait info
	
	if( exists $set->{ReferenceClinVarAssertion}->{TraitSet}->{Type} ){ 

	    my $type = $set->{ReferenceClinVarAssertion}->{TraitSet}->{Type};
 	     
	    my @traits; ### could be one or many

	    if  (ref($set->{ReferenceClinVarAssertion}->{TraitSet}->{Trait}) eq 'ARRAY'){
		@traits = @{$set->{ReferenceClinVarAssertion}->{TraitSet}->{Trait}};
	    }
	    else{
		push @traits, $set->{ReferenceClinVarAssertion}->{TraitSet}->{Trait};
	    } 
	    

	    foreach my $trait (@traits){ 

		######### trait names, name types & ontology accessions
		my @names;

		if  (ref($trait->{Name}) eq 'ARRAY'){ @names = @{$trait->{Name}};}
		else{ push @names, $trait->{Name};}	    
		
		foreach my $name ( @names ){

                    $record{disease} =  $name->{ElementValue}->[0] if $name->{ElementValue}->[1]->{Type} eq "Preferred";

                    $record{ontology_accession} = $name->{XRef}->[1]->{ID} if $name->{XRef}->[1]->{DB} && 
                                                                              $name->{XRef}->[1]->{DB} eq "Human Phenotype Ontology";

		}
	    }
	}
        if (defined $structvar ){ 
	    if( defined $record{dbVar} && $record{dbVar} =~/\d+/ ){
               unless (defined $done{$record{Acc}} || defined $record{dbSNP}){
#	       	warn "Importing SV :  $record{dbVar}\n";
		import( \%record);
               }
	    }
	}
        else{
	    if( defined $record{dbSNP} && $record{dbSNP} =~/\d+/ && defined $record{Chr} ){
		import( \%record);
	    }
	    else{
		#  my $message =  "Not importing var: ";
		#  $message .= " rs: $record{dbSNP} "        if defined $record{dbSNP} ;
		#  $message .= " on chr: $record{Chr} "      if defined $record{Chr} ;
		#  $message .= " with HGVS: $record{hgvs_g}" if defined $record{hgvs_g} ;
		#  $message .= " due to missing data ($record{Acc})\n";
		#  warn $message;
	    }
	}
    };
    if( $@ ne ''){
	die "ERROR: $@\n$current\n\n";
    }
    
}
=head2  import

- check all required info present & update db with a single ClinVar
 
=cut

sub import{

    my $record = shift;

    my $feature_object;
    my $type;
    my $alt_allele; ## disease associated allele from HGVS
    my $feat;       ## use stored *variation_features where possible
    if(defined $record->{dbSNP}){
	($feature_object,  $feat, $alt_allele) = get_variant($record);
        $type = 'Variation';
        ## add synonym
        add_synonyms($feature_object, $record->{Acc}) if defined $feature_object;
    }
    elsif(defined  $record->{dbVar}){
	$type = 'StructuralVariation';
	($feature_object, $feat) = get_structural_variant($record);
    }
    else{
	return;
    }
    return undef unless defined $feature_object && defined $feature_object->dbID(); 

    #return if defined $record->{type} && $record->{type} eq "Allelic variant" ;

    ## deal with non-specified phenos
    $record->{disease} = $default_pheno unless $record->{disease} =~/\w+/;
    $record->{disease} = $default_pheno if $record->{disease} eq "not provided";
    $record->{disease} = $default_pheno if $record->{disease} eq "not specified";


    ## look for existing or enter new phenotype object
    my $pheno = get_phenotype($record->{disease}, $record->{ontology_accession});

  

    my %attribs;
    $attribs{review_status}    = $record->{Status};
    $attribs{external_id}      = $record->{Acc};
    $attribs{clinvar_clin_sig} = $record->{Desc};
    $attribs{risk_allele}      = $alt_allele if defined  $alt_allele && $alt_allele ne "-";
    $attribs{associated_gene}  = $record->{gene} if defined $record->{gene};

    foreach my $feature (@{$feat}){
	print "entering phenofeat type : $type & object id: ".  $feature_object->dbID() . ", position " .$feature->seq_region_start() . "-".  $feature->seq_region_end() . "\n"
           if $DEBUG == 1;

    my $phenofeat = Bio::EnsEMBL::Variation::PhenotypeFeature->new(
	-slice          => $feature->slice(),
	-start          => $feature->seq_region_start(),
	-strand         => $feature->seq_region_strand(),
	-end            => $feature->seq_region_end(),
	-phenotype      => $pheno,
	-is_significant => 1,
	-type           => $type,
	-object         => $feature_object,
	-source         => $source,
	-attribs        => \%attribs
	);
        $pheno_feat_adaptor->store($phenofeat);

    }
}

=head2 get_phenotype

 - retrieve existing or enter new phenotype object

=cut
sub get_phenotype{

    my $desc      = shift;
    my $accession = shift;

    $desc =~s /\\x2c|\\X2C/\,/g; ## decode commas
    $desc =~s /\'//g;            ## remove '

    my $pheno = $phenotype_adaptor->fetch_by_description( $desc )->[0];

    unless ( ref($pheno) eq 'Bio::EnsEMBL::Variation::Phenotype' ){

        $pheno = Bio::EnsEMBL::Variation::Phenotype->new(-description => $desc ); 
        $phenotype_adaptor->store($pheno);
    }

    if($accession){
      #print "Got accession to add for $desc : $accession\n";
      $pheno->add_ontology_accession($accession, 'Data source');
      $phenotype_adaptor->store_ontology_accessions($pheno);
    }

    return $pheno;
}



=head2 get_variant 

  - look up or enter variation
  - returns variation & variation_feature objects & associated allele (from HGVS)

=cut
sub get_variant{

    my $record = shift;
    my $slice  = shift;

    $record->{dbSNP}  = "rs" . $record->{dbSNP};     


    ## need alleles to input for standard variation & for risk allele
    $record->{hgvs_g} = $record->{Chr} . ":" . $record->{hgvs_g};

    my ($ref_allele, $alt_allele);
    eval{
	($ref_allele, $alt_allele) = get_hgvs_alleles( $record->{hgvs_g} );
    };
    ## not printing bulky error message        
    warn "Problem finding allele for $record->{dbSNP}\n" unless $@ eq '';


    ## look for existing variation object to return
    my $var_ob = $variation_adaptor->fetch_by_name($record->{dbSNP});

    if (defined $var_ob){
	my @features = $var_ob->get_all_VariationFeatures();
	return ($var_ob, @features , $alt_allele);
    }


    ### else have to enter variation & associated records

    print "No record found for $record->{dbSNP}\n" if $DEBUG ==1;
    if(!defined $var_ob && !defined $record->{hgvs_g}  ){
	warn "Not entering new refSNP: $record->{dbSNP} as no HGVS available for alleles\n";
	return undef;
    }

    ## enter new records
    my ($new_var_ob, $var_feat) = enter_var($record,  $ref_allele, $alt_allele);
    return ($new_var_ob,  $var_feat, $alt_allele) ; 
}

=head2 enter_var

  - ClinVar releases more frequently than dbSNP so may have new data
  - enter variation, alleles and variation_feature
  - returns variation & variation_feature objects

=cut
sub enter_var{

    my $data       = shift;
    my $ref_allele = shift;
    my $alt_allele = shift;

     unless (defined $ref_allele && defined $alt_allele){
	 warn "ERROR: missing alleles for $data->{hgvs_g} / $data->{dbSNP}\n";
	 return undef;
     }

      
    my $var = Bio::EnsEMBL::Variation::Variation->new
        ( -name              => $data->{dbSNP},
          -source            => $source,
	  -is_somatic        => 0,
          -adaptor           => $variation_adaptor,
        );
    $variation_adaptor->store($var);
    


    foreach my $allele ( $ref_allele, $alt_allele){
        $allele =~s/\s+//;
        my $al = Bio::EnsEMBL::Variation::Allele->new(
            -variation_id   => $var->dbID(),
            -allele         => $allele,
            -adaptor        => $allele_adaptor,
            );
        $allele_adaptor->store($al);
    }


    my $allele_str = $ref_allele ."/". $alt_allele;

    ## get slice for new variationfeature
    my $slice = $slice_adaptor->fetch_by_region( 'chromosome', $data->{Chr} );

    my $vf = Bio::EnsEMBL::Variation::VariationFeature->new
        (-start           => $data->{start},
         -end             => $data->{end},
         -strand          => 1,
         -slice           => $slice,
         -variation_name  => $data->{dbSNP},
         -map_weight      => 1,
         -allele_string   => $allele_str,
         -variation       => $var,
         -source          => $source,
         -is_somatic      => 0,
         -adaptor         => $var_feat_adaptor,
        );
    $var_feat_adaptor->store($vf);
    
    my @vf; #return vf to attach pheno feat to 
    push @vf, $vf;
    return ($var, \@vf);
}



=head2 get_structural_variant

  - get structural variant record to use in phenotype feature
  - new data is not entered
  - returns variation & variation_feature objects

=cut
sub get_structural_variant{

    my $record = shift;

    ## look for existing structural variation object
    my $struct_var_ob = $structvar_adaptor->fetch_by_name($record->{dbVar});

    unless (defined $struct_var_ob && ref($struct_var_ob) eq 'Bio::EnsEMBL::Variation::StructuralVariation' ){

	print "Not entering SV: $record->{dbVar} as not in db \n";
	return undef;
    }
    my @features = $struct_var_ob->get_all_StructuralVariationFeatures();

    return ($struct_var_ob, @features );
}


sub get_source{

    my $desc = shift;

    my $source_adaptor  = $reg->get_adaptor('homo_sapiens', 'variation', 'source');

    my $source = $source_adaptor->fetch_by_name( $desc );

    die "Source information not held for $desc\n" unless defined $source ;

    return $source;
}

sub add_synonyms{

  my $var               = shift;
  my $clinvar_accession = shift;

  $clinvar_accession =~ s/\.\d+$//; ##remove version for synonym

  my $syn_ins_sth = $dba->dbc->prepare(qq[ insert ignore into variation_synonym  
                                           (variation_id, source_id, name)  
                                           values (?,?,?)
                                          ]);

  $syn_ins_sth->execute($var->dbID(), $source->dbID(), $clinvar_accession);


}

sub usage{

    die "\n\tUsage: import_clinvar_xml -data_file [ClinVar xml] -registry [registry file] -assembly [GRCh37/GRCh38]

\t\toptions: -structvar  (only import ClinVar statuses for structural variations)
\n\n";

}
